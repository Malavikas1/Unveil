AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      CodeUri: ./
      AutoPublishAlias: prod
      DeploymentPreference:
        Type: AllAtOnce
        Role: !GetAtt CodeDeployRole.Arn
      Events:
        ApiGetEvent:
          Type: Api
          Properties:
            Path: /hello
            Method: GET
            RestApiId: !Ref MyApi
        ApiOptionsEvent:
          Type: Api
          Properties:
            Path: /hello
            Method: OPTIONS
            RestApiId: !Ref MyApi
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          NODE_ENV: production

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"
        MaxAge: "'3600'"
      Auth:
        DefaultAuthorizer: NONE
      AccessLogSetting:
        DestinationArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/MyApi
        Format: '{ "requestId": "$context.requestId", "ip": "$context.identity.sourceIp", "path": "$context.path", "status": "$context.status" }'

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:PublishVersion
                  - lambda:UpdateAlias
                  - lambda:ListVersionsByFunction
                Resource: !GetAtt MyLambdaFunction.Arn
